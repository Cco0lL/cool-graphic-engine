// Autogenerated code
package cool.kolya.engine.window.callback;

import java.lang.Class;
import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWCharCallbackI;
import org.lwjgl.glfw.GLFWCharModsCallbackI;
import org.lwjgl.glfw.GLFWCursorEnterCallbackI;
import org.lwjgl.glfw.GLFWCursorPosCallbackI;
import org.lwjgl.glfw.GLFWDropCallbackI;
import org.lwjgl.glfw.GLFWFramebufferSizeCallbackI;
import org.lwjgl.glfw.GLFWKeyCallbackI;
import org.lwjgl.glfw.GLFWMouseButtonCallbackI;
import org.lwjgl.glfw.GLFWScrollCallbackI;
import org.lwjgl.glfw.GLFWWindowCloseCallbackI;
import org.lwjgl.glfw.GLFWWindowContentScaleCallbackI;
import org.lwjgl.glfw.GLFWWindowFocusCallbackI;
import org.lwjgl.glfw.GLFWWindowIconifyCallbackI;
import org.lwjgl.glfw.GLFWWindowMaximizeCallbackI;
import org.lwjgl.glfw.GLFWWindowPosCallbackI;
import org.lwjgl.glfw.GLFWWindowRefreshCallbackI;
import org.lwjgl.glfw.GLFWWindowSizeCallbackI;

public class Callbacks {
  public static final Class<GLFWCharCallbackI> Char = GLFWCharCallbackI.class;

  public static final Class<GLFWCharModsCallbackI> CharMods = GLFWCharModsCallbackI.class;

  public static final Class<GLFWCursorEnterCallbackI> CursorEnter = GLFWCursorEnterCallbackI.class;

  public static final Class<GLFWCursorPosCallbackI> CursorPos = GLFWCursorPosCallbackI.class;

  public static final Class<GLFWDropCallbackI> Drop = GLFWDropCallbackI.class;

  public static final Class<GLFWFramebufferSizeCallbackI> FramebufferSize = GLFWFramebufferSizeCallbackI.class;

  public static final Class<GLFWKeyCallbackI> Key = GLFWKeyCallbackI.class;

  public static final Class<GLFWMouseButtonCallbackI> MouseButton = GLFWMouseButtonCallbackI.class;

  public static final Class<GLFWScrollCallbackI> Scroll = GLFWScrollCallbackI.class;

  public static final Class<GLFWWindowCloseCallbackI> WindowClose = GLFWWindowCloseCallbackI.class;

  public static final Class<GLFWWindowContentScaleCallbackI> WindowContentScale = GLFWWindowContentScaleCallbackI.class;

  public static final Class<GLFWWindowFocusCallbackI> WindowFocus = GLFWWindowFocusCallbackI.class;

  public static final Class<GLFWWindowIconifyCallbackI> WindowIconify = GLFWWindowIconifyCallbackI.class;

  public static final Class<GLFWWindowMaximizeCallbackI> WindowMaximize = GLFWWindowMaximizeCallbackI.class;

  public static final Class<GLFWWindowPosCallbackI> WindowPos = GLFWWindowPosCallbackI.class;

  public static final Class<GLFWWindowRefreshCallbackI> WindowRefresh = GLFWWindowRefreshCallbackI.class;

  public static final Class<GLFWWindowSizeCallbackI> WindowSize = GLFWWindowSizeCallbackI.class;

  public static void initialize(WindowCallbackListener callbackListener, long windowPointer) {
    GLFW.glfwSetCharCallback(windowPointer, ((arg0, arg1) ->
            callbackListener.listenCallback(Char, handler -> handler.invoke(arg0, arg1))));
    GLFW.glfwSetCharModsCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(CharMods, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetCursorEnterCallback(windowPointer, ((arg0, arg1) ->
            callbackListener.listenCallback(CursorEnter, handler -> handler.invoke(arg0, arg1))));
    GLFW.glfwSetCursorPosCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(CursorPos, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetDropCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(Drop, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetFramebufferSizeCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(FramebufferSize, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetKeyCallback(windowPointer, ((arg0, arg1, arg2, arg3, arg4) ->
            callbackListener.listenCallback(Key, handler -> handler.invoke(arg0, arg1, arg2, arg3, arg4))));
    GLFW.glfwSetMouseButtonCallback(windowPointer, ((arg0, arg1, arg2, arg3) ->
            callbackListener.listenCallback(MouseButton, handler -> handler.invoke(arg0, arg1, arg2, arg3))));
    GLFW.glfwSetScrollCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(Scroll, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetWindowCloseCallback(windowPointer, ((arg0) ->
            callbackListener.listenCallback(WindowClose, handler -> handler.invoke(arg0))));
    GLFW.glfwSetWindowContentScaleCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(WindowContentScale, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetWindowFocusCallback(windowPointer, ((arg0, arg1) ->
            callbackListener.listenCallback(WindowFocus, handler -> handler.invoke(arg0, arg1))));
    GLFW.glfwSetWindowIconifyCallback(windowPointer, ((arg0, arg1) ->
            callbackListener.listenCallback(WindowIconify, handler -> handler.invoke(arg0, arg1))));
    GLFW.glfwSetWindowMaximizeCallback(windowPointer, ((arg0, arg1) ->
            callbackListener.listenCallback(WindowMaximize, handler -> handler.invoke(arg0, arg1))));
    GLFW.glfwSetWindowPosCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(WindowPos, handler -> handler.invoke(arg0, arg1, arg2))));
    GLFW.glfwSetWindowRefreshCallback(windowPointer, ((arg0) ->
            callbackListener.listenCallback(WindowRefresh, handler -> handler.invoke(arg0))));
    GLFW.glfwSetWindowSizeCallback(windowPointer, ((arg0, arg1, arg2) ->
            callbackListener.listenCallback(WindowSize, handler -> handler.invoke(arg0, arg1, arg2))));
  }
}
